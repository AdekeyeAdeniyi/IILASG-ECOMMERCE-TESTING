// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  VENDOR
  BUYER
}

enum AvailabilityStatus {
  IN_STOCK
  OUT_OF_STOCK
  LIMITED_STOCK
}


model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  first_name           String
  last_name            String
  password            String
  role                Role
  state               String?
  isLagosian          Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  refreshTokenSession RefreshTokenSession?
  products            Product[]             
  categories          Category[]           
}

model RefreshTokenSession {
  id             String   @id @default(uuid())
  userId         String   @unique
  refreshTokenId String   @unique
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  revoked        Boolean  @default(false)

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  Product[]

  @@unique([name, userId])
}

model Product {
  id            String              @id @default(uuid())
  name          String
  slug          String              @unique
  price         Float
  discount      Float               @default(0.0)
  isFeatured    Boolean             @default(false)
  availability  AvailabilityStatus
  quantitySold  Int                 @default(0)
  totalQuantity Int
  description   String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  categoryId    Int?
  category      Category?            @relation(fields: [categoryId], references: [id])

  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)


  features      Feature[]
  reviews       Review[]

  @@index([categoryId])
  @@index([userId])
  @@index([availability])
}



model Feature {
  id        String   @id @default(uuid())
  value     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Review {
  id            String   @id @default(uuid())
  userId        String
  reviewerName  String
  rating        Int?
  message       String
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}


